"""Contains functionality to setup a test environment to run acceptance tests.

Uses behave for running features and mechanize for a fake web browser.
All acceptance tests are written to use the projects web interface and is 
written to pass using the most minimal web client. That means that the tests
should pass on a browser that has no access to javascript, css, flash etc.
"""

import mechanize, os, re, cookielib, os.path, yaml, sys, re, psycopg2
from bs4 import BeautifulSoup

# ==============================================================================
# Helpers

"""Retrive fields from a Yesod form that uses random identity

Since yesod forms assigns unique id's randomly we need to find the id 
by matching it up with the label of the field. 

Returns a dictionary where the keys (as lower case, space changed to _) are the 
field labels and the values are the field names (as in <input name=). 
"""
def get_hident_fields(context):
    soup = context.get_soup()

    field_groups = soup.find_all("div", {"class" : "form-group"})
    fields = {}

    for group in field_groups:
        label = group.find("label")

        if label is None:
            continue

        fname = label.text.lower()
        fname = fname.replace(" ", "_")

        field = group.find("input")
        area  = group.find("textarea")

        if field is not None:
            fields[fname] = field["name"]
        elif area is not None:
            fields[fname] = area["name"]

    return fields

"""Assigns the given value to the given key of the selected form

Uses fields lookup created by `get_hident_fields`. The key is the label 
(as lower case, space changed to _) of the field that you want to add a value to.
"""
def assign_hident(context, fields, k, v):
    fkey = fields[k]
    context.browser.form[fkey] = v

"""Replaces values in the Yesod settings.yaml by environment variables found

Yesod uses the form "_env:APPROOT:http://localhost:3000" and is supposed
to use the environment variable APPROOT if it exist, otherwise the specified
value. This function performs that replacement. 

Is supposed to retrieve a Yaml config generated by the yaml module. Recurses
through the structure and replaces all strings that matches the parts regular
expression.
"""
def replace_settings_env(conf):
    for key in conf:
        val = conf[key]

        if isinstance(val, dict):
            replace_settings_env(val)
            continue

        if not isinstance(val, str):
            continue

        parts = re.search('^_env:([^:]+):(.+)$', val, re.IGNORECASE)

        if parts is None:
            continue

        env_val = os.environ.get(parts.group(1))

        if env_val is None:
            conf[key] = parts.group(2)
        else:
            conf[key] = env_val

"""Reads the yesod yaml settings file from the project and replaces all values.

See replace_settings_env for information about how values are replaced.
"""
def read_settings():
    f = open("src/config/settings.yml")
    settings = yaml.load(f)
    f.close()

    replace_settings_env(settings)

    settings["approot"] = os.environ['BUILDER_PORT'].replace("tcp:", "http:")

    return settings

"""Sets up the mechanize client to be used for acceptance testing.

Uses a cookiejar to be able to handle sessions, will show up as a Firefox
client on Fedora in the http logs.
"""
def setup_browser():
    b = mechanize.Browser()

    b.set_cookiejar(cookielib.LWPCookieJar())

    b.set_handle_equiv(False)
    b.set_handle_equiv(True)
    b.set_handle_redirect(True)
    b.set_handle_referer(True)
    b.set_handle_robots(False)

    b.set_handle_refresh(
        mechanize._http.HTTPRefreshProcessor(), max_time = 1
    )

    b.addheaders = [
        ('User-agent', 'Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.1) Gecko/2008071615 Fedora/3.0.1-1.fc9 Firefox/3.0.1')
    ]

    return b

"""Resets the db to a known minimal state where a user exists for admin tests.

The project needs one page and one user to function normally. This will truncate
all tables, reset ids and add a page and a test user.
"""
def reset_db(context):
    curs = context.db.cursor()

    curs.execute("TRUNCATE TABLE public.text_page RESTART IDENTITY;")

    curs.execute(
        "INSERT INTO public.text_page " +
        "(name, slug, body, public) " +
        "VALUES ('Index', 'index', '', true);"
    )

    curs.execute("TRUNCATE TABLE public.user RESTART IDENTITY;")

    user_data = (
        "tester@test.com",
        "sha256|14|pTLLjljaxlzLasmYpK4/fQ==|C6ns0+mgIZkxRIf7FLJE0VcHKBNIOeEjqNP0JWlDzx0="
    )

    curs.execute(
        "INSERT INTO public.user " +
        "(email, password, verkey, verified, admin) " +
        "VALUES ('%s', '%s', '', true, true);" % user_data
    )

    context.db.commit()
    curs.close()

# ==============================================================================
# Behave hooks

"""Setup of environment before running any of the steps"""
def before_all(context):  
    settings = read_settings()

    s = settings["database"]
    context.db = psycopg2.connect(
        user     = s["user"],
        host     = s["host"],
        database = s["database"],
        password = s["password"]
    )

    reset_db(context)

    context.browser = setup_browser()

    context.get_soup = lambda: BeautifulSoup(context.browser.response().read())
    context.open_url = lambda p: context.browser.open(os.path.join(settings["approot"], p))
    context.get_hident_fields = lambda: get_hident_fields(context)
    context.assign_hident = lambda fs, k, v: assign_hident(context, fs, k, v)

"""Resets the database and closes the database connection after all tests."""
def after_all(context):
    reset_db(context)
    context.db.close()
